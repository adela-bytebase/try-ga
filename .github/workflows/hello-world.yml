name: Hello World Action
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      name:
        description: 'Who to greet'
        required: true
        default: 'World'

jobs:
  hello-world:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run custom hello world action
        uses: ./.github/actions/hello-world
        id: hello
        with:
          name: ${{ github.event.pull_request.user.login || github.event.inputs.name || 'World' }}

      - name: Login Bytebase
        id: bytebase-login
        uses: bytebase/login-action@0.0.2
        with:
          bytebase-url: ${{ secrets.BYTEBASE_URL }}
          service-key: ${{ secrets.BYTEBASE_SERVICE_KEY }}
          service-secret: ${{ secrets.BYTEBASE_SERVICE_SECRET }}

      - name: Apply column masking policy
        if:
        id: apply-column-masking
        run: |
          response=$(curl -s -w "\n%{http_code}" --request PATCH "${{ steps.bytebase-login.outputs.api_url }}/instances/prod-sample-instance/databases/hr_prod/policies/masking?allow_missing=true&update_mask=payload" \
            --header "Authorization: Bearer ${{ steps.bytebase-login.outputs.token }}" \
            --header "Content-Type: application/json" \
            --data @masking/databases/hr_prod/column-masking.json)
          
          # Extract status code and response body
          status_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')
          
          # Log the response
          echo "Status code: $status_code"
          echo "Response body: $body"
          
          # Save to outputs
          echo "status_code=$status_code" >> $GITHUB_OUTPUT
          echo "response=$body" >> $GITHUB_OUTPUT
          
          # Fail if status code is not 2xx
          if [[ $status_code -lt 200 || $status_code -ge 300 ]]; then
            echo "Failed with status code: $status_code"
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          TIME: ${{ steps.hello.outputs.time }}
          MASKING_STATUS: ${{ steps.apply-column-masking.outputs.status_code }}
          MASKING_RESPONSE: ${{ steps.apply-column-masking.outputs.response }}
        with:
          script: |
            const time = process.env.TIME;
            const maskingStatus = process.env.MASKING_STATUS;
            const maskingResponse = process.env.MASKING_RESPONSE;
            
            const commentBody = `
            Hello @${context.payload.pull_request.user.login}! 
            Action was run at ${time}

            ### Column Masking Policy Update Status
            - Status Code: ${maskingStatus}
            - Response: \`\`\`json\n${maskingResponse}\n\`\`\`
            `;
            
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: commentBody
            });