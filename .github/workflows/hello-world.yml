name: Hello World Action
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      name:
        description: 'Who to greet'
        required: true
        default: 'World'

jobs:
  hello-world:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run custom hello world action
        uses: ./.github/actions/hello-world
        id: hello
        with:
          name: ${{ github.event.pull_request.user.login || github.event.inputs.name || 'World' }}

      - name: Login Bytebase
        id: bytebase-login
        uses: bytebase/login-action@0.0.2
        with:
          bytebase-url: ${{ secrets.BYTEBASE_URL }}
          service-key: ${{ secrets.BYTEBASE_SERVICE_KEY }}
          service-secret: ${{ secrets.BYTEBASE_SERVICE_SECRET }}

      - name: Get Projects
        id: get-projects
        run: |
          PROJECTS=$(curl -s "${{ steps.bytebase-login.outputs.api_url }}/projects" \
            -H "Authorization: Bearer ${{ steps.bytebase-login.outputs.token }}" \
            -H "Content-Type: application/json; charset=utf-8")
          echo "projects=$(echo $PROJECTS)" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          TIME: ${{ steps.hello.outputs.time }}
          PROJECTS: ${{ steps.get-projects.outputs.projects }}
        with:
          script: |
            const time = process.env.TIME;
            const projects = JSON.parse(process.env.PROJECTS);
            
            // Format projects list
            const projectsList = projects.map(project => 
              `- ${project.name} (${project.key})`
            ).join('\n');
            
            const commentBody = `
            Hello @${context.payload.pull_request.user.login}! 
            Action was run at ${time}

            ### Projects List:
            ${projectsList}
            `;
            
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: commentBody
            });